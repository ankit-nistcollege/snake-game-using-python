import turtle
import random
import time

# Initial setup
delay = 0.1
score = 0
high_score = 0
bodies = []

# Screen setup
s = turtle.Screen()
s.title("Snake Game")
s.bgcolor("pink")
s.setup(width=700, height=700)
s.tracer(0)

# Snake head
head = turtle.Turtle()
head.speed(0)
head.shape("circle")
head.color("blue")
head.fillcolor("red")
head.penup()
head.goto(0, 0)
head.direction = "right"  # Start moving right

# Food
food = turtle.Turtle()
food.speed(0)
food.shape("square")
food.color("red")
food.fillcolor("blue")
food.penup()
food.goto(100, 100)

# Scoreboard
sb = turtle.Turtle()
sb.penup()
sb.hideturtle()
sb.goto(-250, 250)
sb.write("Score: 0   |   High Score: 0", font=("Arial", 16))

# Movement functions
def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"

def stop():
    head.direction = "stop"

# Keyboard bindings
s.listen()
s.onkey(go_up, "Up")
s.onkey(go_down, "Down")
s.onkey(go_left, "Left")
s.onkey(go_right, "Right")
s.onkey(stop, "space")

# Main game loop
while True:
    s.update()

    # Check collision with border
    if head.xcor() > 340 or head.xcor() < -340 or head.ycor() > 340 or head.ycor() < -340:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "right"
        for body in bodies:
            body.hideturtle()
        bodies.clear()
        score = 0
        delay = 0.1
        sb.clear()
        sb.write("Score: {}   |   High Score: {}".format(score, high_score), font=("Arial", 16))

    # Check collision with food
    if head.distance(food) < 20:
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        body = turtle.Turtle()
        body.speed(0)
        body.shape("square")
        body.color("red")
        body.penup()
        bodies.append(body)

        score += 100
        delay = max(0.05, delay - 0.001)

        if score > high_score:
            high_score = score

        sb.clear()
        sb.write("Score: {}   |   High Score: {}".format(score, high_score), font=("Arial", 16))

    # Move the body
    for i in range(len(bodies)-1, 0, -1):
        x = bodies[i-1].xcor()
        y = bodies[i-1].ycor()
        bodies[i].goto(x, y)

    if len(bodies) > 0:
        x = head.xcor()
        y = head.ycor()
        bodies[0].goto(x, y)

    move()

    # Check collision with body
    for body in bodies:
        if body.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "right"
            for body in bodies:
                body.hideturtle()
            bodies.clear()
            score = 0
            delay = 0.1
            sb.clear()
            sb.write("Score: {}   |   High Score: {}".format(score, high_score), font=("Arial", 16))
            break

    time.sleep(delay)
 
